http://www.w3cplus.com/blog/tags/302.html?page=15




sass基础入门（基础篇）--===============================================================================

一. 什么是SASS(.scss)
  SASS是采用Ruby语言编写的一款CSS预处理语言，提供了许多便利的写法，大大节省了设计者的时间，使得css的开发变的简单和可维护

   sass有两种后缀名文件：一种后缀名为sass，不使用大括号和分号；另一种就是我们这里使用的scss文件，这种和我们平时写的css文件格式差不多，使用大括号和分号


二. 安装和使用
  SASS是Ruby语言写的，但是两者的语法没有关系。不懂Ruby，照样使用。只是必须先安装Ruby，然后再安装SASS。
  安装Ruby:   1. rubyinstaller(打开命令 ruby -v)
              2. 安装devkit(下载后直接解压)
	      3. 创建config.yml文件(1.cmd 2.c:\DevKit 3.ruby dk.rb init初始建仓config.yml文件)
	      4. 执行审查和安装ruby dk.rb reviewruby dk.rb install

   Ruby命令行执行：gem install sass

三. 使用
   sass test.scss 命令，可以在屏幕上显示.scss文件转化的css代码
   sass test.scss test.css 命令将显示结果保存成文件，后面再跟一个.css文件名

   SASS提供四个编译风格的选项：
   nested：嵌套缩进的css代码，它是默认值。
   expanded：没有缩进的、扩展的css代码。
   compact：简洁格式的css代码。
   compressed：压缩后的css代码。

// watch a file
sass --watch input.scss:output.css
// watch a directory
sass --watch app/sass:public/stylesheets

四. 基本用法
  4.1 变量：SASS允许使用变量，所有变量以$开头,若变量镶嵌在字条串中，就必须写在#{}中
   $blue:#1875e7;
   $side:left;
   div{
     color:$blue;
     border-#{$side}-radius:5px;
   }

  4.2 计算功能
    body{
     margin:(14px/2);
    }

  4.3 嵌套
  div h1{            div{
    color:red;		h1{
  }			   color:red;
			   }
			 }
    属性嵌套：
     p{
       border:{
         color:red;
       }
     }
   4.4 注释
   标准的CSS注释 /* comment */ ，会保留到编译后的文件。
   单行注释 // comment，只保留在SASS源文件中，编译后被省略。

五. 代码的重用
   5.1 继承
     SASS允许一个选择器，继承另一个选择器。比如，现有class1：
     .class1{
        border:1px solid #ddd;
     }
     class2要继承class1，就要使用@extend命令：
     .class2{
       @extend.class1;
       font-size:120%;
     }

    5.2 Mixin(代码重用)
      Mixin有点像C语言的宏，是可以重用的代码块。
      使用@mixin命令，定义一个代码块
      @mixin left{
         float:left;
	 margin-left:10px;
      }
      使用@include命令，调用这个mixin
      div{
	@include left;
      }
      mixin的强大之处，在于可以指定参数和缺省值。
      @mixin left($value:10px){
	float:left;
	margin-right:$value;
      }
      使用的时候，根据需要加入参数：
      div{
        $include left(20px);
      }
      下面是一个mixin的实例，用来生成浏览器前缀。
	@mixin rounded($vert, $horz, $radius: 10px) {
	border-#{$vert}-#{$horz}-radius: $radius;
	-moz-border-radius-#{$vert}#{$horz}: $radius;
	-webkit-border-#{$vert}-#{$horz}-radius: $radius;
	}
	使用的时候，可以像下面这样调用：
	#navbar li { @include rounded(top, left); }
	#footer { @include rounded(top, left, 5px); }

    5.3 颜色函数
       @import命令，用来插入外部文件。
       @import("path/filename.scss");
       如果插入的是.css文件，则等同于css的import命令
       @import "foo.css"

六. 高级用法
    6.1 条件语句：
     @if可以用来判断：
      p{
        @if 1+1 == 2{border:1px solid;}
	@if 5<3{border:2px dotted;}
      }
      配套还有@else命令：
      @if lightness($color) >30% {
         background-color:#000;
      }@else{
        background-color:#fff;
      }

      6.2 循环语句
      @for $i from 1 to 10{
	.border-#{$i}{
	  border:#{$i}px solid blue;
	}
      }

      $i:6;
      @while $i >0{
	.item-#{$i}{width:2em*$i;}
	$i:$i-2;
      }

      each命令，使用与for类似
      @each $member in a,b,c,d{
	.#{$member}{
	   background-image:url("/image/#{$member}.jpg");
	}
      }
      6.3 自定义函数
      SASS允许用户编写自己的函数
      @function double($n){
	@return $n*2;
      }
      #sidebar{
	width:double(5px);
      }
      $siaowuge =shen;

--=====================================================================================

SASS的基本概念：变量，混合参数，嵌套，选择器继承
一. 变量
  例：$red:#ff4848
  内置函数：变暗(darken) 和 变亮(lighten)
  $fontsize:12px
  h1
    color:$red
  p
    color:darken($red,10%)

二. 嵌套
   选择器嵌套(选择器后不加：)
 .speaker
   .name
     font:
       weight:bold
       size:$fontsize+10px
   .position
     font:
       size:$fontsize
  原：.speaker .name{
	font-weight:bold;
	font-size:22px;
  }
   属性嵌套
     font:
        weight:bold

三. 混合
    混合是SASS中另一个很优秀的特性，混合可以让你定义一整块SASS代码，甚至你可以给他们定义参数，更酷的是你还可以设置默认值
    @mixin定义   @include调用

    @mixin border-radius($amount:5px)
    -moz-border-radius:$amount
    -webkit-border-radius:$amount
    border-radius:$amount
    h1
      @include border-radius(2px)
   .speaker
    @include border-radius

转CSS：h1{
   -moz-border-radius:2px;
   -webikit-border-radius:2px;
   border-radius:2px;
}
.speaker{
   -moz-border-radius:5px;
   -webkit-border-radius:5px;
   border-radius:5px;
}

三. 选择器继承
    h1
      border:4px solid #ff9aa9;
   .speaker
      @extend h1
      border-width:2px

转CSS：h1,.speaker{
    border:4px solid #ff9aa9;
}
.speaker{
    border-width:2px;
}

--=====================================================================================
[Sass]命令编译
  单文件编译：
    sass <要编译的Sass文件路径>/style.scss:<要输出CSS文件路径>/style.css
  多文件编译：
    sass sass/:css/ (上面的命令表示将项目中“sass”文件夹中所有“.scss”(“.sass”)文件编译成“.css”文件，并且将这些 CSS 文件都放在项目中“css”文件夹中。)

 开户”watch“功能

[Sass]不同样式风格的输出方法(嵌套，展开，紧凑，压缩)
 例：
 nav{
     ul{ margin:0; }
     li{ display:inline-block; }
   }
 嵌套输出方式 nested(编译时带上参数：sass --watch test.scss:test.css --style nested)


 展开输出方式 expanded  (sass --watch test.scss:test.css --style expanded)
   nav{
     ul{margin:0;}
     li{display:inline-block;}
   }

 紧凑输出方式 compact ( --style compact)
 nav ul{margin:0;padding:0;}
 nav li{display:inline-block;}

 压缩输出方式 compressed (--style compressed)
 nav ul{margin:0;padding:0;}nav li{display:inline-block;}

--=====================================================================================
 [Sass]普通变量与默认变量
  普通变量：
    $fontSize:12px;
    body{ font-size:$fontSize; }

  默认变量：(default)
    $baseLineHeight:1.5 !default;
    body{ line-height:$baseLineHeight; }

[Sass]局部变量和全局变量
   $color:orange !default: //定义全局变量
   .block{
      color:$color; //调用全局变量
   }
   em{
     $color:red; //定义局部变量 (全局变量Color的影子)

     a{color:$color; //调用局部变量}
   }
   span{ color:$color; } //调用全局变量

[Sass]嵌套-选择器嵌套(选择器嵌套,选择器嵌套,伪类嵌套)
  1. 选择器嵌套
    nav a{ color:red; }
    header nav a{ color:green; }
  SASS：
    nav{
      a{
        color:red;
	header &{  //& 选择符置前表示该元素为嵌套元素的子级，置后表示该元素为嵌套元素的父级。
	  color:green;
	}
      }
    }
  2. 选择器嵌套
  3. 伪类嵌套

[Sass]混合宏-声明混合宏
  //代替比较复杂，需要重复使用大段的样式时，选择混合宏
  1. 声明混合宏(不带参数混合宏)
    @mixin border-radius{
      -webkit-border-radius:5px;
      border-radius:5px;
    }
  2. 带参数混合宏
    @mixin border-radius($radius:5px){
       -webkit-border-radius:$radius;
       border-radius:$radius;
    }
  3. 复杂的混合宏：
    @mixin box-shadow($shadow...){
      @if length($shadow) >=1{
        @include prefixer(box-shadow,$shadow);
      }@else{
        $shadow:0 0 4px rgba(0,0,0,3);
	@invlude prefixer(box-shadow,$shadow);
      }
    }

[Sass]混合宏-调用混合宏(@invlude)
  定义：
    @mixin border-radius{
     -webkit-border-radius:3px;
     border-radius:3px;
  }
  调用：
    button{
     @include border-radius; //@include 宏名
  }
  编译：
    button{
       -webkit-border-radius:3px;
       border-radius:3px;
    }

[Sass]混合宏的参数--传一个不带值的参数
   传一个不带值的参数：
     @mixin border-radius($radius){
       -webkit-border-radius:$radius;
       border-radius:$radius;
     }
  调用：.box{
     @include border-radius(3px);
  }

混合宏的参数--传一个带值的参数
     @mixin border-radius($radius:3px){
       -webkit-border-radius:$radius;
       border-radius:$radius;
     }
  调用：.box{
     @include border-radius(3px);
  }

[Sass]混合宏的参数--传多个参数
  @mixin center($width,$height){
    width:$width;
    height:$height;
  }
 调用：.box-center{
     @include center(500px,300px);
 }

[Sass]混合宏的参数--混合宏的不足
  不足之处是会生成冗余的代码块,不能把重复的代码合并在一起

[Sass]扩展/继承( @extend 样式)
 .btn{
   border:1px solid #ccc;
   font-size:14px;
 }
 .btn-primary{
   color:#fff;
   @extend .btn;
 }
 .btn, .btn-primary{
   border:1px solid #ccc;
   font-size:14px;
 }

[Sass]占位符 %placeholder
  它可以取代以前CSS中的基类造成的代码冗余的情形，因为%placeholder声明的代码，如果不被@extend调用的话不会产生任何代码。
  %mt5{ margin-top:5px; }
  %pt5{ padding-top:5px; }
  .btn{
    @extend %mt5;
    @extend %pt5;
  }
  .block{
    @extend %mt5;

    span{
      @extend %pt5;
    }
  }
  编译：
  .btn,.block{ margin-top:5px; }
  .btn,.block span{ padding-top:5px; }

[Sass]插值#{}
  $properties:(margin,padding);
  @mixin set-value($side,$value){
    @each $prop in $properties{
      #{$prop}-#{#side}:$value;
    }
  }
  .login-box{ @include set-value(top,14px); }
  编译： .login-box{ margin-top:14px;  padding-top:14px;  }
  构建选择器设置属性值：
    @mixin generate-sizes($class,$small,$medium,$big){
       .#{$class}-small{font-size:$small;}
       .#{$class}-medium{font-size:$medium;}
       .#{$class}-big{ font-size:$big; }
    }
    @include generate-sizes("header-text",12px,20px,40px);

4-18 [Sass]注释
  1、类似 CSS 的注释方式，使用 ”/* ”开头，结属使用 ”*/ ” (编译后显示)
  2、类似 JavaScript 的注释方式，使用“//”                (编译后不显示)

4-19 [Sass]数据类型
   数字: 如，1、 2、 13、 10px；
   字符串：有引号字符串或无引号字符串，如，"foo"、 'bar'、 baz；
   颜色：如，blue、 #04a3f9、 rgba(255,0,0,0.5)；
   布尔型：如，true、 false；
   空值：如，null；
   值列表：用空格或者逗号分开，如，1.5em 1em 0 2em 、 Helvetica, Arial, sans-serif。

4-20 [Sass]字符串
  支持两种字符串类型：
    有引号字符串 (quoted strings)，如 "Lucida Grande" 、'http://sass-lang.com'；
    无引号字符串 (unquoted strings)，如 sans-serifbold。

4-21 [Sass]值列表(用空格或逗号分开的)
  margin: 10px 15px 0 0   或者   font-face: Helvetica, Arial, sans-serif

  Sass列表函数（Sass list functions）赋予了值列表更多功能（Sass进级会有讲解）：

nth函数（nth function） 可以直接访问值列表中的某一项；
join函数（join function） 可以将多个值列表连结在一起；
append函数（append function） 可以在值列表中添加值；
@each规则（@each rule） 则能够给值列表中的每个项目添加样式。

--=====================================================================================
第5章 Sass的基本特性-运算

5-1 [Sass运算]加法


5-3 [Sass运算]乘法
   .box {
      width: 10px * 2;
    }

5-4 [Sass运算]除法（加括号）
   .box {
       width: (100px / 2);
     }

5-5 [Sass运算]变量计算

5-6 [Sass运算]数字运算

5-7 [Sass运算]颜色运算

5-8 [Sass运算]字符运算

